// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/riotkit-org/backup-maker-operator/pkg/apis/riotkit/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterBackupProcedureTemplateLister helps list ClusterBackupProcedureTemplates.
// All objects returned here must be treated as read-only.
type ClusterBackupProcedureTemplateLister interface {
	// List lists all ClusterBackupProcedureTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterBackupProcedureTemplate, err error)
	// ClusterBackupProcedureTemplates returns an object that can list and get ClusterBackupProcedureTemplates.
	ClusterBackupProcedureTemplates(namespace string) ClusterBackupProcedureTemplateNamespaceLister
	ClusterBackupProcedureTemplateListerExpansion
}

// clusterBackupProcedureTemplateLister implements the ClusterBackupProcedureTemplateLister interface.
type clusterBackupProcedureTemplateLister struct {
	indexer cache.Indexer
}

// NewClusterBackupProcedureTemplateLister returns a new ClusterBackupProcedureTemplateLister.
func NewClusterBackupProcedureTemplateLister(indexer cache.Indexer) ClusterBackupProcedureTemplateLister {
	return &clusterBackupProcedureTemplateLister{indexer: indexer}
}

// List lists all ClusterBackupProcedureTemplates in the indexer.
func (s *clusterBackupProcedureTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterBackupProcedureTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterBackupProcedureTemplate))
	})
	return ret, err
}

// ClusterBackupProcedureTemplates returns an object that can list and get ClusterBackupProcedureTemplates.
func (s *clusterBackupProcedureTemplateLister) ClusterBackupProcedureTemplates(namespace string) ClusterBackupProcedureTemplateNamespaceLister {
	return clusterBackupProcedureTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterBackupProcedureTemplateNamespaceLister helps list and get ClusterBackupProcedureTemplates.
// All objects returned here must be treated as read-only.
type ClusterBackupProcedureTemplateNamespaceLister interface {
	// List lists all ClusterBackupProcedureTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterBackupProcedureTemplate, err error)
	// Get retrieves the ClusterBackupProcedureTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterBackupProcedureTemplate, error)
	ClusterBackupProcedureTemplateNamespaceListerExpansion
}

// clusterBackupProcedureTemplateNamespaceLister implements the ClusterBackupProcedureTemplateNamespaceLister
// interface.
type clusterBackupProcedureTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterBackupProcedureTemplates in the indexer for a given namespace.
func (s clusterBackupProcedureTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterBackupProcedureTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterBackupProcedureTemplate))
	})
	return ret, err
}

// Get retrieves the ClusterBackupProcedureTemplate from the indexer for a given namespace and name.
func (s clusterBackupProcedureTemplateNamespaceLister) Get(name string) (*v1alpha1.ClusterBackupProcedureTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterbackupproceduretemplate"), name)
	}
	return obj.(*v1alpha1.ClusterBackupProcedureTemplate), nil
}
