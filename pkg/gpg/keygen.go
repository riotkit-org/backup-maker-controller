package gpg

import (
	"bytes"
	"github.com/ProtonMail/go-crypto/openpgp"
	"github.com/pkg/errors"
	"golang.org/x/crypto/openpgp/armor"
)

type PublicKey string
type PrivateKey string

func generateFullGPGIdentity(email string) (PublicKey, PrivateKey, error) {
	e, err := openpgp.NewEntity(email, "Generated by Backup Maker's Kubernetes operator", email, nil)
	if err != nil {
		return "", "", errors.Wrap(err, "cannot generate GPG identity")
	}

	// output public key
	var pubKey bytes.Buffer
	pubKeyFormat, err := armor.Encode(&pubKey, openpgp.PublicKeyType, nil)
	if err := e.Serialize(pubKeyFormat); err != nil {
		return "", "", errors.Wrap(err, "cannot encode public key")
	}

	// and private key
	var privateKey bytes.Buffer
	privateKeyFormat, err := armor.Encode(&privateKey, openpgp.PrivateKeyType, nil)
	if err := e.SerializePrivate(privateKeyFormat, nil); err != nil {
		return "", "", errors.Wrap(err, "cannot encode private key")
	}

	return PublicKey(pubKey.String()), PrivateKey(privateKey.String()), nil
}
